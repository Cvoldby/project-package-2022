tst <- function(x, y) {
pa <- polya(x, delta = 0.1, q = 0.1)
pb <- polya(y, delta = 0.1, q = 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, tst)
persp(x, y, z, theta = 30, phi = 15)
polya <- function(x, delta, q, n = 16){
# This is pochhammer function used in the polya-distribution.
pochhammer <- function(x, n){
return(gamma(x + n) / gamma(x))}
return(choose(n, x)
* pochhammer(q * (1 / delta - 1), x)
* pochhammer(((1 - delta) * (1 - q))/q, n - x)
* 1 / pochhammer(1 / q - 1, n))
}
x <- seq(0, 16)
y <- polya(x, delta = 0.1, q = 0.1)
plot(x, y, type = "l") # Plot for polya distribution for one species.
tst <- function(x, y) {
pa <- polya(x, delta = 0.1, q = 0.1)
pb <- polya(y, delta = 0.1, q = 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, tst)
persp(x, y, z, theta = 20, phi = 15, main = "Relatively small spatial aggregation" )
persp(x, y, z, theta = 20, phi = 15, lphi = 15,ltheta =  15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15, lphi = 45,ltheta =  15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density",nticks = 16)
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.1)
pb <- polya(x, delta = 0.5, 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.1)
pb <- polya(y, delta = 0.5, 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density",axes = FALSE)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
small_agg <- function(x, y) {
pa <- polya(x, delta = 0.1, q = 0.1)
pb <- polya(y, delta = 0.1, q = 0.1)
if (x + y <= 16) {
return(pa * pb)
}
else{
return(0)
}
}
x <- y <- seq(0,16)
z <- outer(x, y, small_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.5)
pb <- polya(y, delta = 0.5, 0.5)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively large spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.5)
pb <- polya(y, delta = 0.5, 0.5)
if (x + y <= 16) {
return(pa * pb)
}
else{
return(0)
}
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively large spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
if (x + y < 16) {
return(pa * pb)
}
else{
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.5)
pb <- polya(y, delta = 0.5, 0.5)
if (x + y < 16) {
return(pa * pb)
}
else{
return(0)
}
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively large spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
pa <- polya(x, delta = 0.5, q = 0.1)
pb <- polya(y, delta = 0.5, q = 0.1)
if (x + y < 16) {
return(pa * pb)
}
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, q = 0.1)
pb <- polya(y, delta = 0.5, q = 0.1)
if (x + y < 16) {
return(pa * pb)
}
else{
return(0)
}
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively large spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density",
zlim = c(0,0.1))
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
rm(list = ls())
library("devtools")
document()
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r - s), 1, replace = TRUE)
u[[i]] <- 16 - r - s - t
}
return(c(r, s, t, u))
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r - s), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(c(r, s, t, u))
}
simulate_plant_cover_data(10)
warnings()
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r - s), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(r, s, t, u)
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r[[i]]), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r[[i]] - s[[i]]), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(r, s, t, u)
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r[[i]]), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r[[i]] - s[[i]]), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(c(r, s, t, u))
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r[[i]]), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r[[i]] - s[[i]]), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(cbind(r, s, t, u))
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(0:16, 1, replace = TRUE)
s[[i]] <- sample(0:(16 - r[[i]]), 1, replace = TRUE)
t[[i]] <- sample(0:(16 - r[[i]] - s[[i]]), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(cbind(r, s, t, u))
}
simulate_plant_cover_data(10)
rm(list = ls())
observed_cov <- function(r, s, t, u, N){
a = 1 / N
return(a * (a * sum((r + t) * (s + t)) - a * sum(r + t) * a * sum(s + t)))
}
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(0:16, 1)
s[[i]] <- sample(0:(16 - r[[i]]), 1)
t[[i]] <- sample(0:(16 - r[[i]] - s[[i]]), 1)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(cbind(r, s, t, u))
}
tst <- simulate_plant_cover_data(10)
tst
tst[1]
tst[[1]]
tst[[1:10]]
tst[1:10]
tst[c(1,1:10)]
tst[c(2,1:10)]
tst[1][1]
tst[1][2]
tst[2][2]
tst[2][1]
tst[2][3]
tst[4]
tst[0]
tst[1]
tst[1:10, 2]
tst[1:10, 3]
tst[1:10, 4]
tst[1:10, 5]
tst[1:10, 4]
observed_cov(tst[1:10, 1], tst[1:10, 2], tst[1:10, 3], tst[1:10, 4], 10)
rm(list = ls())
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(0:16, 1)
s[[i]] <- sample(0:(16 - r[[i]]), 1)
t[[i]] <- sample(0:(16 - r[[i]] - s[[i]]), 1)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(cbind(r, s, t, u))
}
observed_cov <- function(r, s, t, u, N){
a = 1 / N
return(a * (a * sum((r + t) * (s + t)) - a * sum(r + t) * a * sum(s + t)))
}
expected_cov <- function(r, s, t, u, n, N){
t_bar <- sum(t) / N
qa <- sum(r) / N
qb <- sum(s) / N
return(sum(t_bar) - n * qa * qb + n^(2 - 2 * n) * t_bar^n * (n^n * (qa + qb) - 2 * t_bar^n))
}
simulate_plant_cover_data(10)
tst <- simulate_plant_cover_data()
tst <- simulate_plant_cover_data(10)
tst[:,1]
tst[,1]
tst
observed_cov(tst[,1],tst[,2],tst[,3],tst[,4])
observed_cov(tst[,1],tst[,2],tst[,3],tst[,4], N = 10)
expected_cov(tst[,1], tst[,2], tst[,3], tst[,4], n = 16, N = 10)
expected_cov <- function(r, s, t, u, n, N){
t_bar <- sum(t) / N / n
qa <- sum(r) / N / n
qb <- sum(s) / N / n
return(sum(t_bar) - n * qa * qb + n^(2 - 2 * n) * t_bar^n * (n^n * (qa + qb) - 2 * t_bar^n))
}
expected_cov(tst[,1], tst[,2], tst[,3], tst[,4], n = 16, N = 10)
knitr::opts_chunk$set(echo = TRUE)
pinpoint_2007 <- read.csv("../Data/Pinpoint - Alle arter 2007.csv")
pinpoint_2007 <- read.csv("../Data/Pinpoint - Alle arter 2007.csv")
abiotiske <- read.csv("../Data/alledata-abiotiske.csv")
abiotiske <- read.csv("../Data/alledata-abiotiske.csv")
cover <- read.csv("../Data/alledata-cover.csv")
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X974", colnames(cover)))]
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
View(tst_cover)
tst_cover <- tst_cover[, !apply(tst_cover == 0, 2, all)]
View(tst_cover)
tst_cover <- subset(tst_cover, X974 > 0)
View(tst_cover)
noquote("X974")
tst_cover <- subset(cover, X974 > 0)
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
tst_cover <- subset(tst_cover, noquote("X974") > 0)
tst_cover <- subset(tst_cover, noquote("X974") > 0)
tst_cover <- subset(tst_cover, X974 > 0)
tst_cover <- subset(tst_cover, noquote("X974") > 0)
tst_cover <- subset(cover, X974 > 0)
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
a <- noquote("X974")
tst_cover <- subset(tst_cover, print("X974", quote = FALSE) > 0)
tst_cover <- subset(tst_cover, cat("X974", "\n") > 0)
tst_cover <- subset(cover, X974 > 0)
tst_cover <- subset(cover, X974 > 0)
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
a <- noquote("X974")
tst_cover <- subset(tst_cover, as.factor("X974") > 0)
tst_cover <- subset(tst_cover, as.array.default("X974") > 0)
tst_cover <- subset(cover, X974 > 0)
tst_cover <- subset(cover, X974 > 0)
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
a <- noquote("X974")
tst_cover <- subset(tst_cover, as.array.default("X974") > 0)
tst_cover <- subset(tst_cover, a > 0)
tst_cover <- subset(tst_cover, as.call("X974") > 0)
rm(a)
tst_cover <- subset(tst_cover, as.character("X974") > 0)
tst_cover <- subset(tst_cover, as.data.frame.character("X974") > 0)
tst_cover <- subset(tst_cover, as.data.frame.noquote("X974") > 0)
noquote(X974)
noquote("X974")
tst_cover[tst_cover == 0] <- NA
tst_cover <- tst_cover[complete.cases(tst_cover), ]
tst_cover[1,]
tst_cover[,1]
tst_cover[tst_cover$X974,]
a <- noquote("X974")
as.logical.factor("X974")
as.factor("X974")
as.data.frame.character("X974")
sapply(tst_cover, class)
lapply(tst_cover, class)
as.data.frame.integer("X974")
as.data.frame.integer("X974")
bunke_hedelyng_cover <- cover[cover$X974 > 0, ]
bunke_hedelyng_cover <- cover[cover$X974 > 0 | cover$X2020 > 0, ]
quote(X974)
colnames(tst_cover)
tst_cover[[4]]
tst_cover[[5]]
tst_cover[[2]]
tst_cover[[1]]
tst_cover <- subset(cover, X974 > 0)
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
tst_cover$X974
tst_cover <- tst_cover[tst_cover[[4]] > 0 | tst_cover > 0, ]
tst_cover <- tst_cover[tst_cover[[4]] > 0 | tst_cover[[5]] > 0, ]
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
tst_cover <- tst_cover[tst_cover[[4]] > 0 | tst_cover[[5]] > 0, ]
tst_cover <- tst_cover[tst_cover[[4]] > 0 & tst_cover[[5]] > 0, ]
bunke_hedelyng_cover <- cover[cover$X974 > 0 | cover$X2020 > 0, ]
bunke_hedelyng_cover <- bunke_hedelyng_cover[, !apply(bunke_hedelyng_cover == 0, 2, all)]
bunke_hedelyng_cover <- cover[cover$X974 > 0 & cover$X2020 > 0, ]
bunke_hedelyng_cover <- bunke_hedelyng_cover[, !apply(bunke_hedelyng_cover == 0, 2, all)]
bunke_hedelyng_cover <- bunke_hedelyng_cover[bunke_hedelyng_cover$X2020 > 0 & bunke_hedelyng_cover$X974 > 0, ]
bunke_hedelyng_cover <- bunke_hedelyng_cover[c("site", "plot", "year", "X974", "X2020")]
bunke_hedelyng_cover <- cover[cover$X974 > 0 | cover$X2020 > 0, ]
bunke_hedelyng_cover <- bunke_hedelyng_cover[c("site", "plot", "year", "X974", "X2020")]
bunke_hedelyng_cover <- cover[cover$X974 > 0 & cover$X2020 > 0, ]
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
tst_cover <- tst_cover[tst_cover[[4]] > 0 & tst_cover[[5]] > 0, ]
tst_cover <- tst_cover[tst_cover[[4]] > 0 & tst_cover[[5]] > 0 & tst_cover$year == 2007, ]
tst_cover <- cover[c(1:3, grep("X974", colnames(cover)), grep("X2020", colnames(cover)))]
tst_cover <- tst_cover[tst_cover[[4]] > 0 & tst_cover[[5]] > 0, ]
unique(tst_cover$year)
# Data manipulation: Selecting all the sites with 30 or more plots.
test_list <- c()
L <- unique(bunke_hedelyng_cover[c("site")])
for (i in 1:length(table(bunke_hedelyng_cover$site))) {
if (table(bunke_hedelyng_cover$site)[i] > 30) {
test_list <- c(test_list, L[i,])
}
}
bunke_hedelyng_cover <- subset(bunke_hedelyng_cover, site %in% test_list)
bunke_hedelyng_cover <- cover[cover$X974 > 0 & cover$X2020 > 0, ]
bunke_hedelyng_cover <- bunke_hedelyng_cover[c("site", "plot", "year", "X974", "X2020")]
# Data manipulation: Selecting all the sites with 30 or more plots.
test_list <- c()
L <- unique(bunke_hedelyng_cover[c("site")])
for (i in 1:length(table(bunke_hedelyng_cover$site))) {
if (table(bunke_hedelyng_cover$site)[i] > 30) {
test_list <- c(test_list, L[i,])
}
}
bunke_hedelyng_cover <- subset(bunke_hedelyng_cover, site %in% test_list)
View(bunke_hedelyng_cover)
table(bunke_hedelyng_cover$site)
as.data.frame(table(bunke_hedelyng_cover$site))
table(bunke_hedelyng_cover)
rm(a)
length(bunke_hedelyng_cover)
length(bunke_hedelyng_cover$site)
length(bunke_hedelyng_cover[,:])
length(bunke_hedelyng_cover[:,])
length(bunke_hedelyng_cover[:])
length(bunke_hedelyng_cover[1:])
length(bunke_hedelyng_cover[1:-1])
length(bunke_hedelyng_cover[[:]])
length(bunke_hedelyng_cover[[:-1]])
dim(bunke_hedelyng_cover)
dim(bunke_hedelyng_cover)[1]
dim.data.frame(bunke_hedelyng_cover)
dim.data.frame(bunke_hedelyng_cover)[1]
for (i in 1:dim.data.frame(bunke_hedelyng_cover)[2]) {
}
for (i in 1:dim.data.frame(bunke_hedelyng_cover)[2]) {
print(i)
}
