x <- seq(0.01, 1, length = 17)
v = dbeta(x, q/dlt - q, (1 - q)*(1 - dlt)/dlt)
if (r + s < 16) {
dmultinom(x = c(r, s, n - r), prob = c(v[r], v[s], 1 - v[r] - v[s]))
}
}
r <- s <- seq(0, 16)
z <- outer(r, s, tst)
v
length(v)
x <- seq(0.01, 0.99, length = 17)
v = dbeta(x, q/dlt - q, (1 - q)*(1 - dlt)/dlt)
if (r + s < 16) {
dmultinom(x = c(r, s, n), prob = c(v, v, 1 - v - v))
}
1 - v - v
sum(v)
dlt <- 0.1
q <- 0.1
n <- 16
x <- seq(0, 1, length = 17)
v <- pbeta(x, q/dlt - q, (1 - q)*(1 - dlt)/dlt)
plot(x, v, type = "l", ylab = "Beta Density")
# These plot do not really make sense to me.
x <- seq(0, 16)
tst <- dmultinom(x = c(x, 0, 16 - x), prob = c(v, 10, ))
tst <- function(r, s, d = 0.1, q = 0.1, n = 16){
x <- seq(0.01, 0.99, length = 17)
v = pbeta(x, q/dlt - q, (1 - q)*(1 - dlt)/dlt)
dmultinom(x = c(r, 0, n), prob = c(v, 10, 1 - v ))
}
r <- s <- seq(0, 16)
z <- outer(r, s, tst)
v
tst <- function(r, s, d = 0.1, q = 0.1, n = 16){
x <- seq(0.01, 0.99, length = 17)
v = pbeta(x, q/dlt - q, (1 - q)*(1 - dlt)/dlt)
dmultinom(x = c(r, s, n - r - s), prob = c(v[r], v[s], 1 - v[r] - v[s]))
}
r <- s <- seq(0, 16)
z <- outer(r, s, tst)
tst <- function(r, s, d = 0.1, q = 0.1, n = 16){
x <- seq(0.01, 0.99, length = 17)
v = pbeta(x, q/dlt - q, (1 - q)*(1 - dlt)/dlt)
#dmultinom(x = c(r, s, n - r - s), prob = c(v[r], v[s], 1 - v[r] - v[s]))
sqrt(r + s ^ 2)
}
r <- s <- seq(0, 16)
z <- outer(r, s, tst)
persp(r, s, z)
library("plot3D")
install.packages("plot3D")
persp(r, s, z, theta = 30, phi = 15)
rm(list = ls())
getwd()
setwd("../../Documents/my_r_packages/project_package/")
devtools::document()
getwd()
devtools::document()
devtools::document()
devtools::document()
getwd()
choose(5,16)
choose(16,5)
library(devtools)
document()
document()
document()
?
d
d
knitr::opts_chunk$set(echo = TRUE)
x <- seq(0, 16, length = 100)
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
plot(x, y, type = "l")
x <- seq(0, 16)
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
plot(x, y, type = "l")
y <- polya(x, delta = 0.5, q = 0.1, n = 16)
plot(x, y, type = "l")
choose(16, x)
x
dbinom(5, 1, prob = 0.5)
dbinom(0.1, 1, prob = 0.5)
dbinom(0, 1, prob = 0.5)
dbinom(1, 1, prob = 0.5)
x
dbinom(x = x, size = 16, prob = 11/16)
plot(x, dbinom(x = x, size = 16, prob = 11/16), type = "l")
x <- seq(0, 16)
y <- polya(x, delta = 0.5, q = 0.1, n = 16)
plot(x, y, type = "l")
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
plot(x, y, type = "l")
z <- y * y
y
t(y)
z <- t(y) @ y
x <- seq(0, 16)
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
z <- t(y) @ y
y <- t(y)
t(y)
y <- t(y)
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
y <- t(y)
z <- t(y) @ y
z <- t(y) * y
z <- t(y) %*% y
z
x <- seq(0, 16)
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
y <- t(y)
z <- t(y) %*% y
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
z <- t(y) %*% y
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
y <- t(y)
z <- t(y) %*% y
plot(x, y, type = "l")
tst <- function(x, y) {
pa <- polya(x, delta = 0.1, q = 0.1)
pb <- polya(y, delta = 0.1, q = 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, tst)
plot(x, y, type = "l")
z <- outer(x, y, tst)
x <- seq(0, 16)
y <- polya(x, delta = 0.1, q = 0.1, n = 16)
plot(x, y, type = "l") # Plot for polya distribution for one species.
tst <- function(x, y) {
pa <- polya(x, delta = 0.1, q = 0.1)
pb <- polya(y, delta = 0.1, q = 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, tst)
persp(x, y, z, theta = 30, phi = 15)
polya <- function(x, delta, q, n = 16){
# This is pochhammer function used in the polya-distribution.
pochhammer <- function(x, n){
return(gamma(x + n) / gamma(x))}
return(choose(n, x)
* pochhammer(q * (1 / delta - 1), x)
* pochhammer(((1 - delta) * (1 - q))/q, n - x)
* 1 / pochhammer(1 / q - 1, n))
}
x <- seq(0, 16)
y <- polya(x, delta = 0.1, q = 0.1)
plot(x, y, type = "l") # Plot for polya distribution for one species.
tst <- function(x, y) {
pa <- polya(x, delta = 0.1, q = 0.1)
pb <- polya(y, delta = 0.1, q = 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, tst)
persp(x, y, z, theta = 20, phi = 15, main = "Relatively small spatial aggregation" )
persp(x, y, z, theta = 20, phi = 15, lphi = 15,ltheta =  15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15, lphi = 45,ltheta =  15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density",nticks = 16)
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.1)
pb <- polya(x, delta = 0.5, 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.1)
pb <- polya(y, delta = 0.5, 0.1)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density",axes = FALSE)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
small_agg <- function(x, y) {
pa <- polya(x, delta = 0.1, q = 0.1)
pb <- polya(y, delta = 0.1, q = 0.1)
if (x + y <= 16) {
return(pa * pb)
}
else{
return(0)
}
}
x <- y <- seq(0,16)
z <- outer(x, y, small_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.5)
pb <- polya(y, delta = 0.5, 0.5)
return(pa * pb)
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively large spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.5)
pb <- polya(y, delta = 0.5, 0.5)
if (x + y <= 16) {
return(pa * pb)
}
else{
return(0)
}
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively large spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
if (x + y < 16) {
return(pa * pb)
}
else{
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, 0.5)
pb <- polya(y, delta = 0.5, 0.5)
if (x + y < 16) {
return(pa * pb)
}
else{
return(0)
}
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively large spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
pa <- polya(x, delta = 0.5, q = 0.1)
pb <- polya(y, delta = 0.5, q = 0.1)
if (x + y < 16) {
return(pa * pb)
}
large_agg <- function(x, y) {
pa <- polya(x, delta = 0.5, q = 0.1)
pb <- polya(y, delta = 0.5, q = 0.1)
if (x + y < 16) {
return(pa * pb)
}
else{
return(0)
}
}
x <- y <- seq(0,16)
z <- outer(x, y, large_agg)
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively large spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density",
zlim = c(0,0.1))
persp(x, y, z, theta = 20, phi = 15,
main = "Relatively small spatial aggregation",
xlab = "Pins that hit only sp. A",
ylab = "Pins that hit only sp. B",
zlab = "Density")
rm(list = ls())
library("devtools")
document()
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
sample(1:16, 1)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r - s), 1, replace = TRUE)
u[[i]] <- 16 - r - s - t
}
return(c(r, s, t, u))
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r - s), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(c(r, s, t, u))
}
simulate_plant_cover_data(10)
warnings()
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r - s), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(r, s, t, u)
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r[[i]]), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r[[i]] - s[[i]]), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(r, s, t, u)
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r[[i]]), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r[[i]] - s[[i]]), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(c(r, s, t, u))
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(1:16, 1, replace = TRUE)
s[[i]] <- sample(1:(16 - r[[i]]), 1, replace = TRUE)
t[[i]] <- sample(1:(16 - r[[i]] - s[[i]]), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(cbind(r, s, t, u))
}
simulate_plant_cover_data(10)
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(0:16, 1, replace = TRUE)
s[[i]] <- sample(0:(16 - r[[i]]), 1, replace = TRUE)
t[[i]] <- sample(0:(16 - r[[i]] - s[[i]]), 1, replace = TRUE)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(cbind(r, s, t, u))
}
simulate_plant_cover_data(10)
rm(list = ls())
observed_cov <- function(r, s, t, u, N){
a = 1 / N
return(a * (a * sum((r + t) * (s + t)) - a * sum(r + t) * a * sum(s + t)))
}
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(0:16, 1)
s[[i]] <- sample(0:(16 - r[[i]]), 1)
t[[i]] <- sample(0:(16 - r[[i]] - s[[i]]), 1)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(cbind(r, s, t, u))
}
tst <- simulate_plant_cover_data(10)
tst
tst[1]
tst[[1]]
tst[[1:10]]
tst[1:10]
tst[c(1,1:10)]
tst[c(2,1:10)]
tst[1][1]
tst[1][2]
tst[2][2]
tst[2][1]
tst[2][3]
tst[4]
tst[0]
tst[1]
tst[1:10, 2]
tst[1:10, 3]
tst[1:10, 4]
tst[1:10, 5]
tst[1:10, 4]
observed_cov(tst[1:10, 1], tst[1:10, 2], tst[1:10, 3], tst[1:10, 4], 10)
rm(list = ls())
simulate_plant_cover_data <- function(N){
r <- vector("integer", N)
s <- vector("integer", N)
t <- vector("integer", N)
u <- vector("integer", N)
i <- 1
for (i in 1:N) {
r[[i]] <- sample(0:16, 1)
s[[i]] <- sample(0:(16 - r[[i]]), 1)
t[[i]] <- sample(0:(16 - r[[i]] - s[[i]]), 1)
u[[i]] <- 16 - r[[i]] - s[[i]] - t[[i]]
}
return(cbind(r, s, t, u))
}
observed_cov <- function(r, s, t, u, N){
a = 1 / N
return(a * (a * sum((r + t) * (s + t)) - a * sum(r + t) * a * sum(s + t)))
}
expected_cov <- function(r, s, t, u, n, N){
t_bar <- sum(t) / N
qa <- sum(r) / N
qb <- sum(s) / N
return(sum(t_bar) - n * qa * qb + n^(2 - 2 * n) * t_bar^n * (n^n * (qa + qb) - 2 * t_bar^n))
}
simulate_plant_cover_data(10)
tst <- simulate_plant_cover_data()
tst <- simulate_plant_cover_data(10)
tst[:,1]
tst[,1]
tst
observed_cov(tst[,1],tst[,2],tst[,3],tst[,4])
observed_cov(tst[,1],tst[,2],tst[,3],tst[,4], N = 10)
expected_cov(tst[,1], tst[,2], tst[,3], tst[,4], n = 16, N = 10)
expected_cov <- function(r, s, t, u, n, N){
t_bar <- sum(t) / N / n
qa <- sum(r) / N / n
qb <- sum(s) / N / n
return(sum(t_bar) - n * qa * qb + n^(2 - 2 * n) * t_bar^n * (n^n * (qa + qb) - 2 * t_bar^n))
}
expected_cov(tst[,1], tst[,2], tst[,3], tst[,4], n = 16, N = 10)
